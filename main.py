import logging
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import os
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    from config import BOT_TOKEN, ADMIN_ID
except ImportError:
    print("‚ùå –û—à–∏–±–∫–∞: –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª config.py —Å BOT_TOKEN –∏ ADMIN_ID")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        conn = sqlite3.connect('fleamarket.db', check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                phone TEXT,
                registered_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS ads (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                title TEXT NOT NULL,
                description TEXT,
                price REAL,
                category TEXT,
                photo_id TEXT,
                status TEXT DEFAULT 'pending',
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        
        conn.commit()
        conn.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def register_user(user_id, username, first_name, last_name):
    try:
        conn = sqlite3.connect('fleamarket.db', check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT OR IGNORE INTO users (user_id, username, first_name, last_name)
            VALUES (?, ?, ?, ?)
        ''', (user_id, username, first_name, last_name))
        
        conn.commit()
        conn.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        register_user(user.id, user.username, user.first_name, user.last_name)
        
        keyboard = [
            ["üì¶ –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", "üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"],
            ["üîç –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∞—Ä–∞—Ö–æ–ª–∫—É –í–µ—Ä—Ö–Ω–µ–π –ü—ã—à–º—ã!\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ üì¶ –ü—Ä–æ–¥–∞–≤–∞—Ç—å –≤–µ—â–∏\n"
            "‚Ä¢ üîç –ü–æ–∫—É–ø–∞—Ç—å —Ç–æ–≤–∞—Ä—ã\n"
            "‚Ä¢ üí∞ –ù–∞—Ö–æ–¥–∏—Ç—å –≤—ã–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
async def add_ad(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data['creating_ad'] = True
        context.user_data['ad_data'] = {}
        
        await update.message.reply_text(
            "üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_ad: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not update.message or not update.message.text:
            return
            
        user_data = context.user_data
        
        if user_data.get('creating_ad'):
            ad_data = user_data.get('ad_data', {})
            
            if 'title' not in ad_data:
                ad_data['title'] = update.message.text
                await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
            
            elif 'description' not in ad_data:
                ad_data['description'] = update.message.text
                await update.message.reply_text("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
            
            elif 'price' not in ad_data:
                try:
                    price = float(update.message.text.replace(',', '.'))
                    ad_data['price'] = price
                    
                    keyboard = [
                        ["üëï –û–¥–µ–∂–¥–∞", "üëü –û–±—É–≤—å"],
                        ["üì± –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "üè† –î–ª—è –¥–æ–º–∞"],
                        ["üéÆ –•–æ–±–±–∏", "üìö –ö–Ω–∏–≥–∏"],
                        ["üöó –ê–≤—Ç–æ", "‚öΩ –î—Ä—É–≥–æ–µ"]
                    ]
                    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                    
                    await update.message.reply_text(
                        "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:",
                        reply_markup=reply_markup
                    )
                    
                except ValueError:
                    await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
            
            elif 'category' not in ad_data:
                ad_data['category'] = update.message.text
                await update.message.reply_text(
                    "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ):",
                    reply_markup=ReplyKeyboardMarkup([["–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]], resize_keyboard=True)
                )
            
            elif 'photo' not in ad_data:
                if update.message.text and update.message.text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
                    ad_data['photo'] = None
                    await save_ad(update, context)
                else:
                    await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
            
            user_data['ad_data'] = ad_data
            return
        
        if user_data.get('searching'):
            await search_ads(update, context)
            return
        
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_message: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_data = context.user_data
        
        if user_data.get('creating_ad') and user_data.get('ad_data', {}).get('category'):
            ad_data = user_data['ad_data']
            ad_data['photo'] = update.message.photo[-1].file_id
            await save_ad(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_photo: {e}")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
async def save_ad(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_data = context.user_data
        ad_data = user_data.get('ad_data', {})
        user = update.effective_user
        
        if all(key in ad_data for key in ['title', 'description', 'price', 'category']):
            conn = sqlite3.connect('fleamarket.db', check_same_thread=False)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO ads (user_id, title, description, price, category, photo_id, status)
                VALUES (?, ?, ?, ?, ?, ?, 'pending')
            ''', (user.id, ad_data['title'], ad_data['description'], 
                  ad_data['price'], ad_data['category'], ad_data.get('photo')))
            
            ad_id = cursor.lastrowid
            conn.commit()
            conn.close()
            
            await notify_admin(context, ad_id, ad_data, user)
            
            user_data.pop('creating_ad', None)
            user_data.pop('ad_data', None)
            
            keyboard = [
                ["üì¶ –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", "üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"],
                ["üîç –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                "‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!\n"
                "–û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤.\n\n"
                "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ save_ad: {e}")

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def notify_admin(context: ContextTypes.DEFAULT_TYPE, ad_id: int, ad_data: dict, user):
    try:
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{ad_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{ad_id}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = (
            "üÜï –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!\n\n"
            f"üìå ID: {ad_id}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or '–Ω–µ—Ç'} ({user.first_name})\n"
            f"üì¶ –¢–æ–≤–∞—Ä: {ad_data['title']}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {ad_data['description']}\n"
            f"üí∞ –¶–µ–Ω–∞: {ad_data['price']} —Ä—É–±.\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ad_data['category']}"
        )
        
        if ad_data.get('photo'):
            await context.bot.send_photo(
                chat_id=ADMIN_ID,
                photo=ad_data['photo'],
                caption=message_text,
                reply_markup=reply_markup
            )
        else:
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=message_text,
                reply_markup=reply_markup
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
async def handle_moderation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()
        
        data = query.data
        ad_id = int(data.split('_')[1])
        
        conn = sqlite3.connect('fleamarket.db', check_same_thread=False)
        cursor = conn.cursor()
        
        if data.startswith('approve'):
            cursor.execute('UPDATE ads SET status = "approved" WHERE id = ?', (ad_id,))
            status_text = "–æ–¥–æ–±—Ä–µ–Ω–æ"
            
            cursor.execute('SELECT user_id FROM ads WHERE id = ?', (ad_id,))
            result = cursor.fetchone()
            if result:
                user_id = result[0]
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=f"‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ‚Ññ{ad_id} –±—ã–ª–æ –æ–¥–æ–±—Ä–µ–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        
        elif data.startswith('reject'):
            cursor.execute('UPDATE ads SET status = "rejected" WHERE id = ?', (ad_id,))
            status_text = "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"
            
            cursor.execute('SELECT user_id FROM ads WHERE id = ?', (ad_id,))
            result = cursor.fetchone()
            if result:
                user_id = result[0]
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=f"‚ùå –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ‚Ññ{ad_id} –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º."
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        
        conn.commit()
        conn.close()
        
        await query.edit_message_text(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ ‚Ññ{ad_id} {status_text}!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_moderation: {e}")

# –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
async def my_ads(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        
        conn = sqlite3.connect('fleamarket.db', check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT id, title, description, price, category, status, created_at 
            FROM ads WHERE user_id = ? ORDER BY created_at DESC
        ''', (user.id,))
        
        ads = cursor.fetchall()
        conn.close()
        
        if not ads:
            await update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
            return
        
        for ad in ads:
            ad_id, title, description, price, category, status, created_at = ad
            
            status_emoji = {
                'pending': '‚è≥',
                'approved': '‚úÖ',
                'rejected': '‚ùå'
            }.get(status, '‚ùì')
            
            message = (
                f"üì¶ –û–±—ä—è–≤–ª–µ–Ω–∏–µ ‚Ññ{ad_id}\n"
                f"üìå {title}\n"
                f"üìù {description}\n"
                f"üí∞ {price} —Ä—É–±.\n"
                f"üìÇ {category}\n"
                f"üìÖ {created_at[:10]}\n"
                f"–°—Ç–∞—Ç—É—Å: {status_emoji} {status}\n"
            )
            
            await update.message.reply_text(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ my_ads: {e}")

# –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
async def search_ads_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data['searching'] = True
        await update.message.reply_text(
            "üîç –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
            "(–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏ —Ç.–¥.)"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ search_ads_command: {e}")

async def search_ads(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        search_term = f"%{update.message.text}%"
        
        conn = sqlite3.connect('fleamarket.db', check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT a.id, a.title, a.description, a.price, a.category, a.photo_id, 
                   u.username, u.first_name, a.created_at
            FROM ads a
            JOIN users u ON a.user_id = u.user_id
            WHERE a.status = 'approved' 
            AND (a.title LIKE ? OR a.description LIKE ? OR a.category LIKE ?)
            ORDER BY a.created_at DESC
            LIMIT 20
        ''', (search_term, search_term, search_term))
        
        ads = cursor.fetchall()
        conn.close()
        
        context.user_data['searching'] = False
        
        if not ads:
            await update.message.reply_text("üòî –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        await update.message.reply_text(f"üîç –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(ads)}")
        
        for ad in ads:
            ad_id, title, description, price, category, photo_id, username, first_name, created_at = ad
            
            contact_info = f"@{username}" if username else first_name
            
            message = (
                f"üì¶ {title}\n"
                f"üìù {description}\n"
                f"üí∞ {price} —Ä—É–±.\n"
                f"üìÇ {category}\n"
                f"üë§ {contact_info}\n"
                f"üìÖ {created_at[:10]}\n"
                f"ID: {ad_id}"
            )
            
            try:
                if photo_id:
                    await context.bot.send_photo(
                        chat_id=update.effective_chat.id,
                        photo=photo_id,
                        caption=message
                    )
                else:
                    await update.message.reply_text(message)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
                await update.message.reply_text(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ search_ads: {e}")

# –ü–æ–º–æ—â—å
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        help_text = (
            "‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–∞—Ä–∞—Ö–æ–ª–∫–∏\n\n"
            "–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n"
            "1. –ù–∞–∂–º–∏—Ç–µ 'üì¶ –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'\n"
            "2. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞\n"
            "3. –î–æ–∂–¥–∏—Ç–µ—Å—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n\n"
            "–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n"
            "1. –ù–∞–∂–º–∏—Ç–µ 'üîç –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π'\n"
            "2. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
            "3. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n\n"
            "–ü—Ä–∞–≤–∏–ª–∞:\n"
            "‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤\n"
            "‚Ä¢ –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
            "‚Ä¢ –û–ø–∏—Å—ã–≤–∞–π—Ç–µ —Ç–æ–≤–∞—Ä —á–µ—Å—Ç–Ω–æ\n\n"
            "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        
        await update.message.reply_text(help_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ help_command: {e}")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if update.effective_user.id != ADMIN_ID:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        conn = sqlite3.connect('fleamarket.db', check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('SELECT COUNT(*) FROM ads WHERE status = "pending"')
        pending = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM ads WHERE status = "approved"')
        approved = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM users')
        users = cursor.fetchone()[0]
        
        conn.close()
        
        stats_text = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞—Ä–∞—Ö–æ–ª–∫–∏\n\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users}\n"
            f"‚è≥ –û–∂–∏–¥–∞—é—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {pending}\n"
            f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {approved}\n"
        )
        
        await update.message.reply_text(stats_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_stats: {e}")

def main():
    try:
        print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
        init_db()
        
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("stats", admin_stats))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(handle_moderation, pattern="^(approve|reject)_"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
        application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üì¶ –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ$"), add_ad))
        application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è$"), my_ads))
        application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üîç –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π$"), search_ads_command))
        application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^‚ÑπÔ∏è –ü–æ–º–æ—â—å$"), help_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        print("ü§ñ –ò—â–∏—Ç–µ –±–æ—Ç–∞ –≤ Telegram –ø–æ username")
        
        # –£–±–∏—Ä–∞–µ–º input() –¥–ª—è –æ–±–ª–∞—á–Ω–æ–π —Å—Ä–µ–¥—ã
        application.run_polling()
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        # –£–±–∏—Ä–∞–µ–º input() –¥–ª—è –æ–±–ª–∞—á–Ω–æ–π —Å—Ä–µ–¥—ã
        time.sleep(5)  # –ü–∞—É–∑–∞ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫—É

if __name__ == '__main__':
    main()
